{"version":3,"file":"static/js/677.0ff023d2.chunk.js","mappings":"yKACA,G,QAA0B,0BAA1B,EAA4D,wBAA5D,EAAmG,8BAAnG,EAA6K,0BAA7K,EAAiN,yB,mBCejN,EAPmB,SAACA,GAChB,OACI,gBAAKC,UAAWC,EAAhB,UACI,SAAC,KAAD,CAASC,GAAE,mBAAcH,EAAMI,IAA/B,SAAsCJ,EAAMK,UCGxD,EARgB,SAACL,GACb,OACI,0BACI,gBAAKC,UAAWC,EAAhB,SAA4BF,EAAMM,a,uCCyBxCC,GAAeC,EAAAA,EAAAA,GAAiB,KAmBhCC,GAAsBC,EAAAA,EAAAA,GAAU,CAAEC,KAAM,wBAAlBD,EAlBL,SAACV,GACpB,OACI,kBAAMY,SAAUZ,EAAMa,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CACIC,UAAWC,EAAAA,GACXC,SAAU,CAACC,EAAAA,EAAeX,GAC1BF,KAAK,iBACLc,YAAY,0BAGpB,0BACI,6CAQhB,EA/CgB,SAACnB,GASb,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKF,EAAMoB,YAAYC,aAAaC,KAAI,SAACC,EAAIC,GAAL,OAChC,SAAC,EAAD,CAAYnB,KAAMkB,EAAGlB,KAAMD,GAAImB,EAAGnB,IAASoB,SAGnD,iBAAKvB,UAAWC,EAAhB,UACKF,EAAMoB,YAAYK,YAAYH,KAAI,SAACC,EAAIC,GAAL,OAC/B,SAAC,EAAD,CAASlB,QAASiB,EAAGjB,SAAckB,OAEvC,SAACf,EAAD,CAAqBG,SAjBkB,SAACc,GAChDC,QAAQC,IAAIF,EAAOG,gBACnB7B,EAAM8B,YAAYJ,EAAOG,0B,8DCL7BE,EAA6B,SAACC,GAC9B,MAAO,CACHC,OAAQD,EAAME,KAAKD,SCO3B,IAcA,GAAeE,EAAAA,EAAAA,KAA6BC,EAAAA,EAAAA,KAdtB,SAACJ,GACnB,MAAO,CACHZ,YAAaY,EAAMZ,gBAIF,SAACiB,GACtB,MAAO,CACHP,YAAa,SAACD,GACVQ,GAASC,EAAAA,EAAAA,GAAuBT,UDZrC,SAA6BU,GAQhC,OADiCH,EAAAA,EAAAA,IAAQL,EAARK,EANjC,SAA2BpC,GACvB,IAAMiC,EAAyBjC,EAAzBiC,OAAWO,GAAjB,OAA+BxC,EAA/B,GACA,OAAKiC,GACE,SAACM,GAAD,UAAgBC,KADH,SAAC,KAAD,CAAUrC,GAAI,gBCc1C,CAA4GsC","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialog\":\"Dialogs_dialog__htSTl\",\"dialogsItems\":\"Dialogs_dialogsItems__zeEWD\",\"active\":\"Dialogs_active__t8cjl\",\"messages\":\"Dialogs_messages__Cg2l+\",\"message\":\"Dialogs_message__ZEWo0\"};","import React from \"react\"\nimport s from \"./../Dialogs.module.css\"\nimport { NavLink } from \"react-router-dom\"\n\ntype DialogItemsPropsType = {\n    name: string\n    id: number\n}\n\nconst DialogItem = (props: DialogItemsPropsType) => {\n    return (\n        <div className={s.dialog}>\n            <NavLink to={`/dialogs/${props.id}`}>{props.name}</NavLink>\n        </div>\n    )\n}\nexport default DialogItem\n","import React from \"react\"\nimport s from \"./../Dialogs.module.css\"\n\ntype MessagePropsType = {\n    message: string\n}\n\nconst Message = (props: MessagePropsType) => {\n    return (\n        <div>\n            <div className={s.message}>{props.message}</div>\n        </div>\n    )\n}\n\nexport default Message\n","import React from \"react\"\nimport s from \"./Dialogs.module.css\"\nimport DialogItem from \"./DialogItem/DialogItem\"\nimport Message from \"./Message/Message\"\nimport { DialogsPropsType } from \"./DialogsContainer\"\nimport { Field, reduxForm, SubmitHandler } from \"redux-form\"\nimport { maxLengthCreator, requiredField } from \"utils/validators/validators\"\nimport { Textarea } from \"components/common/FormsControls/FormsControls\"\n\nconst Dialogs = (props: DialogsPropsType) => {\n    // const Dialogs = (props: any) => {\n\n    let addNewMessage: SubmitHandler<{}, {}, string> = (values: any) => {\n        console.log(values.newMessageBody)\n        props.sendMessage(values.newMessageBody)\n        // Do something with the form values (message body) here\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {props.dialogsPage.messagesData.map((el, index) => (\n                    <DialogItem name={el.name} id={el.id} key={index} />\n                ))}\n            </div>\n            <div className={s.messages}>\n                {props.dialogsPage.dialogsData.map((el, index) => (\n                    <Message message={el.message} key={index} />\n                ))}\n                <AddMessageFormRedux onSubmit={addNewMessage} />\n            </div>\n        </div>\n    )\n}\n\nconst maxLength100 = maxLengthCreator(100)\nconst AddMessageForm = (props: any) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field\n                    component={Textarea}\n                    validate={[requiredField, maxLength100]}\n                    name=\"newMessageBody\"\n                    placeholder=\"Enter your message\"\n                />\n            </div>\n            <div>\n                <button>Send</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddMessageFormRedux = reduxForm({ form: \"dialogAddMessageForm\" })(AddMessageForm)\n\nexport default Dialogs\n","import React, { ComponentType } from \"react\"\nimport { Redirect } from \"react-router-dom\"\nimport { AppStateType } from \"redux/redux-store\"\nimport { connect } from \"react-redux\"\n\ntype mapStatePropsForRedirectType = {\n    isAuth: boolean\n}\n\nlet mapStateToPropsForRedirect = (state: AppStateType): mapStatePropsForRedirectType => {\n    return {\n        isAuth: state.auth.isAuth,\n    }\n}\n\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\n    function RedirectComponent(props: mapStatePropsForRedirectType) {\n        let { isAuth, ...restProps } = props\n        if (!isAuth) return <Redirect to={\"/login\"} />\n        return <Component {...(restProps as T)} />\n    }\n\n    let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\n    return ConnectedRedirectComponent\n}\n","import React from \"react\"\nimport { addDialogActionCreator, InitialStateType } from \"redux/dialogs-reducer\"\nimport Dialogs from \"./Dialogs\"\nimport { connect } from \"react-redux\"\nimport { AppStateType } from \"redux/redux-store\"\nimport { compose, Dispatch } from \"redux\"\nimport { WithAuthRedirect } from \"hoc/withAuthRedirect\"\n\ntype mapStatePropsType = {\n    dialogsPage: InitialStateType\n}\n\ntype mapDispatchToPropsType = {\n    sendMessage: (newMessageBody: string) => void\n}\n\nexport type DialogsPropsType = mapStatePropsType & mapDispatchToPropsType\n\nlet mapStateToProps = (state: AppStateType): mapStatePropsType => {\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n}\n\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\n    return {\n        sendMessage: (newMessageBody: string) => {\n            dispatch(addDialogActionCreator(newMessageBody))\n        },\n    }\n}\n\nexport default compose<React.ComponentType>(connect(mapStateToProps, mapDispatchToProps), WithAuthRedirect)(Dialogs)\n"],"names":["props","className","s","to","id","name","message","maxLength100","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","requiredField","placeholder","dialogsPage","messagesData","map","el","index","dialogsData","values","console","log","newMessageBody","sendMessage","mapStateToPropsForRedirect","state","isAuth","auth","compose","connect","dispatch","addDialogActionCreator","Component","restProps","Dialogs"],"sourceRoot":""}