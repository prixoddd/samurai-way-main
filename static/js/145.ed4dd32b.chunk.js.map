{"version":3,"file":"static/js/145.ed4dd32b.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/MyPost.module.css?4339","components/Profile/MyPosts/Post/MyPost.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__XBXuJ\",\"mainPhoto\":\"ProfileInfo_mainPhoto__QU8TO\"};","import React, { ChangeEvent, useEffect, useState } from \"react\"\n\ntype propsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nconst ProfileStatusWithHooks = (props: propsType) => {\n    let [editMode, setEditMode] = useState(false)\n    let [status, setStatus] = useState(props.status)\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const activateMode = () => {\n        setEditMode(true)\n    }\n\n    const diactivateMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <div>\n            {!editMode && (\n                <div>\n                    <span onDoubleClick={activateMode}>{props.status}</span>\n                </div>\n            )}\n            {editMode && (\n                <div>\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={diactivateMode} value={status}></input>\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default ProfileStatusWithHooks\n","import React from \"react\"\nimport { ProfileDataPropsType } from \"components/Profile/ProfileInfo/ProfileInfo\"\nimport { createField, Input, Textarea } from \"components/common/FormsControls/FormsControls\"\nimport { reduxForm } from \"redux-form\"\nimport s from \"components/common/FormsControls/FormsControls.module.sass\"\n\ntype ProfileFormData = {\n    fullName: string\n}\n\nconst ProfileDataForm = ({ profile, handleSubmit, error }: ProfileDataPropsType) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <button>Save</button>\n            </div>\n            {error && <div className={s.formSummaryError}>{error}</div>}\n            <div>\n                <b>Full Name</b>: {createField(\"Full name\", \"fullName\", [], Input)}\n            </div>\n            <div>\n                <b>Looking for a job</b>: {createField(\"\", \"lookingForAJob\", [], Input, { type: \"checkbox\" })}\n            </div>\n            <div>\n                <b>My professional skills</b>:{\" \"}\n                {createField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\n            </div>\n            <div>\n                <b>About me</b>: {createField(\"About me\", \"aboutMe\", [], Textarea)}\n            </div>\n\n            <div>\n                <b>Contacts</b>:\n                {profile.contacts &&\n                    Object.entries(profile?.contacts).map(([key]) => {\n                        return (\n                            <div key={key}>\n                                <b>{key}</b>: {createField(key, \"contacts.\" + key, [], Input)}\n                            </div>\n                        )\n                    })}\n            </div>\n        </form>\n    )\n}\nconst ProfileDataFormReduxForm = reduxForm<ProfileFormData, ProfileDataPropsType>({ form: \"edit-profile\" })(\n    ProfileDataForm,\n)\n\nexport default ProfileDataFormReduxForm\n","import React, { useRef, useState } from \"react\"\nimport s from \"./ProfileInfo.module.css\"\nimport Preloader from \"../../common/preloader/Preloader\"\nimport { ProfilePropsType } from \"../Profile\"\nimport ProfileStatusWithHooks from \"components/Profile/ProfileInfo/ProfileStatusWithHooks\"\nimport mainPhoto from \"../../../assets/img/mainUser.png\"\nimport { ProfileType } from \"components/Profile/ProfileContainer\"\nimport ProfileDataForm from \"components/Profile/ProfileInfo/ProfileDataForm\"\n\nconst ProfileInfo = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }: ProfilePropsType) => {\n    const [photo, setPhoto] = useState(1)\n    const [editMode, setEditMode] = useState(false)\n\n    const buttonCleaner = () => {\n        if (inputFile.current) {\n            inputFile.current.value = \"\"\n            inputFile.current.type = \"text\"\n            inputFile.current.type = \"file\"\n        }\n    }\n\n    const inputFile = useRef<HTMLInputElement | null>(null)\n\n    if (!profile) {\n        return <Preloader />\n    }\n\n    const ButtonHandler = () => {\n        savePhoto(photo).finally(() => {\n            buttonCleaner()\n        })\n    }\n\n    const MainPhotoSelectedOn = (e: any) => {\n        debugger\n        if (e.target.files.length) {\n            setPhoto(e.target.files[0])\n        }\n    }\n\n    const onSubmit = (formData: any) => {\n        saveProfile(formData).then(() => setEditMode(false))\n    }\n\n    return (\n        <div>\n            <div className={s.descriptionBlock}>\n                <img src={profile.photos ? profile.photos.large : mainPhoto} alt=\"\" className={s.mainPhoto} />\n                {/*<img src={mainPhoto} alt=\"\" className={s.mainPhoto} />*/}\n                {isOwner && (\n                    <div>\n                        <input type={\"file\"} onChange={MainPhotoSelectedOn} ref={inputFile} />\n                        <button disabled={photo === 1} onClick={ButtonHandler}>\n                            Submit\n                        </button>\n                    </div>\n                )}\n                {editMode ? (\n                    <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\n                ) : (\n                    <ProfileData\n                        goToEditMode={() => setEditMode(true)}\n                        profile={profile}\n                        isOwner={isOwner}\n                    ></ProfileData>\n                )}\n\n                <div>\n                    <b>Status</b>: <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\n                </div>\n            </div>\n        </div>\n    )\n}\n\ntype ContactProps = {\n    contactTitle: string\n    contactValue: string | null\n}\n\nexport type ProfileDataPropsType = {\n    profile: ProfileType\n    isOwner?: boolean\n    error?: string\n    goToEditMode?: () => void\n    handleSubmit?: () => void\n}\n\nconst ProfileData = ({ profile, isOwner, goToEditMode }: ProfileDataPropsType) => {\n    return (\n        <div>\n            {isOwner && (\n                <div>\n                    <button onClick={goToEditMode}>edit</button>\n                </div>\n            )}\n            <div>\n                <b>Full Name</b>: {profile.fullName}\n            </div>\n            <div>\n                <b>Looking for a job</b>: {profile.lookingForAJob ? \"Yes\" : \"No\"}\n            </div>\n            <div>\n                <b>My professional skills</b>: {profile.lookingForAJobDescription}\n            </div>\n            <div>\n                <b>About me</b>: {profile.aboutMe}\n            </div>\n\n            <div>\n                <b>Contacts</b>:\n                {profile.contacts &&\n                    Object.entries(profile?.contacts).map(([key, value]) => {\n                        return <Contact key={key} contactTitle={key} contactValue={value} />\n                    })}\n            </div>\n        </div>\n    )\n}\n\nexport const Contact: React.FC<ContactProps> = ({ contactTitle, contactValue }) => {\n    return (\n        <div>\n            <b>{contactTitle}</b>: {contactValue}\n        </div>\n    )\n}\n\nexport default ProfileInfo\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__lB-pf\",\"posts\":\"MyPosts_posts__GSiZ2\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"MyPost_item__xSWqM\"};","import React from \"react\"\nimport s from \"./MyPost.module.css\"\n\ntype MypostPropsType = {\n    message: string\n    countLikes: string\n}\n\nconst MyPost = (props: MypostPropsType) => {\n    return (\n        <div className={s.item}>\n            <img\n                src=\"https://pyxis.nymag.com/v1/imgs/51b/28a/622789406b8850203e2637d657d5a0e0c3-avatar-rerelease.rsquare.w700.jpg\"\n                alt=\"Avatar\"\n            />\n            {props.message}\n            <div>\n                <span>likes: {props.countLikes}</span>\n            </div>\n        </div>\n    )\n}\n\nexport default MyPost\n","import React from \"react\"\nimport s from \"./MyPosts.module.css\"\nimport MyPost from \"./Post/MyPost\"\nimport { MyPostsPropsType } from \"./MyPostsContainer\"\nimport { Field, reduxForm, reset } from \"redux-form\"\nimport { maxLengthCreator, requiredField } from \"utils/validators/validators\"\nimport { Textarea } from \"components/common/FormsControls/FormsControls\"\nimport { AppDispatch } from \"redux/redux-store\"\n\nconst MyPosts = (props: MyPostsPropsType) => {\n    console.log(\"Return YO\")\n    let addPost: (values: any, dispatch: AppDispatch) => void = (values: any, dispatch: AppDispatch) => {\n        props.addPost(values.NewPostText)\n        dispatch(reset(\"ProfileAddNewPostForm\"))\n    }\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <AddNewPostFormRedux onSubmit={addPost} />\n            <div className={s.posts}>\n                {props.posts.map((el, index) => (\n                    <MyPost message={el.message} countLikes={el.countLikes} key={index} />\n                ))}\n            </div>\n        </div>\n    )\n}\n\nconst maxLength10 = maxLengthCreator(10)\n\nfunction AddNewPostForm(props: any) {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field\n                    name=\"NewPostText\"\n                    component={Textarea}\n                    validate={[requiredField, maxLength10]}\n                    placeholder=\"your post message\"\n                />\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddNewPostFormRedux = reduxForm({ form: \"ProfileAddNewPostForm\" })(AddNewPostForm)\n\nexport default MyPosts\n","import React from \"react\"\nimport { addPostActionCreator, MyPostDataItemType } from \"redux/profile-reducer\"\nimport MyPosts from \"./MyPosts\"\nimport { connect } from \"react-redux\"\nimport { AppStateType } from \"redux/redux-store\"\n\ntype mapStatePropsType = {\n    posts: Array<MyPostDataItemType>\n}\n\ntype mapDispatchToPropsType = {\n    addPost: (newPostText: string) => void\n}\n\nexport type MyPostsPropsType = mapStatePropsType & mapDispatchToPropsType\n\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => {\n    return {\n        posts: state.profilePage.myPostData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): mapDispatchToPropsType => {\n    return {\n        addPost: (newPostText: string) => {\n            dispatch(addPostActionCreator(newPostText))\n        },\n    }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\nexport default MyPostsContainer\n","import React from \"react\"\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\"\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\"\nimport { ProfileType } from \"./ProfileContainer\"\n\nexport type ProfilePropsType = {\n    profile: ProfileType\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: any) => Promise<unknown>\n    saveProfile: (data: any) => Promise<unknown>\n}\n\nconst Profile = (props: ProfilePropsType) => {\n    return (\n        <>\n            <ProfileInfo\n                isOwner={props.isOwner}\n                profile={props.profile}\n                status={props.status}\n                updateStatus={props.updateStatus}\n                savePhoto={props.savePhoto}\n                saveProfile={props.saveProfile}\n            />\n            <MyPostsContainer />\n        </>\n    )\n}\n\nexport default Profile\n","import React from \"react\"\nimport Profile from \"./Profile\"\nimport { connect } from \"react-redux\"\nimport {\n    getStatus,\n    getUserProfile,\n    InitialStateType,\n    saveProfile,\n    saveUserPhoto,\n    updateStatus,\n} from \"redux/profile-reducer\"\nimport { AppStateType } from \"redux/redux-store\"\nimport { RouteComponentProps, withRouter } from \"react-router-dom\"\nimport { compose } from \"redux\"\nimport { WithAuthRedirect } from \"hoc/withAuthRedirect\"\n\nexport type ProfileType = {\n    aboutMe: string\n    contacts: {\n        facebook: string | null\n        website: string | null\n        vk: string | null\n        twitter: string | null\n        instagram: string | null\n        youtube: string | null\n        github: string | null\n        mainLink: string | null\n    }\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    fullName: string\n    userId: number\n    photos: {\n        small: string\n        large: string\n    }\n}\n\nexport type ContactsKeys = keyof ProfileType[\"contacts\"]\n\ntype PathParamsType = {\n    userId: string\n}\ntype mapStatePropsType = {\n    profile: ProfileType\n    status: string\n    authorisedUserId: number | null\n    isAuth: boolean\n}\n\ntype mapDispatchPropsType = {\n    getUserProfile: (userId: string) => void\n    getStatus: (userId: string) => void\n    updateStatus: (status: string) => void\n    savePhoto: (file: any) => Promise<unknown>\n    saveProfile: (data: any) => Promise<unknown>\n}\n\ntype MyPostsPropsType = mapStatePropsType & mapDispatchPropsType & RouteComponentProps<PathParamsType>\n\nclass ProfileContainer extends React.Component<MyPostsPropsType, InitialStateType> {\n    refreshProfile() {\n        let userId = this.props.match.params.userId\n        if (!userId && this.props.authorisedUserId) {\n            userId = this.props.authorisedUserId.toString()\n        }\n        if (!userId) this.props.history.push(\"/login\")\n\n        this.props.getUserProfile(userId)\n\n        // setTimeout(() => {\n        this.props.getStatus(userId)\n        // }, 1000)\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: Readonly<MyPostsPropsType>, prevState: Readonly<InitialStateType>, snapshot?: any) {\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\n            this.refreshProfile()\n        }\n    }\n\n    render() {\n        return (\n            <Profile\n                {...this.props}\n                isOwner={!this.props.match.params.userId}\n                profile={this.props.profile}\n                status={this.props.status}\n                updateStatus={this.props.updateStatus}\n                savePhoto={this.props.savePhoto}\n            />\n        )\n    }\n}\n\nlet mapStateToProps = (state: AppStateType): mapStatePropsType => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        authorisedUserId: state.auth.id,\n        isAuth: state.auth.isAuth,\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto: saveUserPhoto, saveProfile }),\n    withRouter,\n    WithAuthRedirect,\n)(ProfileContainer)\n"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","reduxForm","form","profile","handleSubmit","error","onSubmit","className","s","createField","Input","type","Textarea","contacts","Object","entries","map","key","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","savePhoto","saveProfile","photo","setPhoto","inputFile","useRef","Preloader","src","photos","large","mainPhoto","alt","target","files","length","ref","disabled","finally","current","initialValues","formData","then","message","countLikes","maxLength10","maxLengthCreator","AddNewPostFormRedux","Field","name","component","validate","requiredField","placeholder","console","log","values","dispatch","addPost","NewPostText","reset","posts","el","index","connect","state","profilePage","myPostData","newPostText","addPostActionCreator","MyPosts","ProfileContainer","userId","this","match","params","authorisedUserId","toString","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","React","compose","auth","id","isAuth","saveUserPhoto","withRouter","WithAuthRedirect"],"sourceRoot":""}