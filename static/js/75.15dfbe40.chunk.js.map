{"version":3,"file":"static/js/75.15dfbe40.chunk.js","mappings":"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","sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/MyPost.module.css?4339","components/Profile/MyPosts/Post/MyPost.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__XBXuJ\"};","import React, { ChangeEvent, useEffect, useState } from \"react\"\n\ntype propsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nconst ProfileStatusWithHooks = (props: propsType) => {\n    let [editMode, setEditMode] = useState(false)\n    let [status, setStatus] = useState(props.status)\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const activateMode = () => {\n        setEditMode(true)\n    }\n\n    const diactivateMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <div>\n            {!editMode && (\n                <div>\n                    <span onDoubleClick={activateMode}>{props.status}</span>\n                </div>\n            )}\n            {editMode && (\n                <div>\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={diactivateMode} value={status}></input>\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default ProfileStatusWithHooks\n","import React from \"react\"\nimport s from \"./ProfileInfo.module.css\"\nimport Preloader from \"../../common/preloader/Preloader\"\nimport { ProfilePropsType } from \"../Profile\"\nimport ProfileStatusWithHooks from \"components/Profile/ProfileInfo/ProfileStatusWithHooks\"\n\nconst ProfileInfo = ({ profile, status, updateStatus }: ProfilePropsType) => {\n    if (!profile) {\n        return <Preloader />\n    }\n    return (\n        <div>\n            <div className={s.descriptionBlock}>\n                <img src={profile.photos.small} alt=\"\" />\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\n                {profile.fullName}\n            </div>\n        </div>\n    )\n}\nexport default ProfileInfo\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__lB-pf\",\"posts\":\"MyPosts_posts__GSiZ2\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"MyPost_item__xSWqM\"};","import React from \"react\"\nimport s from \"./MyPost.module.css\"\n\ntype MypostPropsType = {\n    message: string\n    countLikes: string\n}\n\nconst MyPost = (props: MypostPropsType) => {\n    return (\n        <div className={s.item}>\n            <img\n                src=\"https://pyxis.nymag.com/v1/imgs/51b/28a/622789406b8850203e2637d657d5a0e0c3-avatar-rerelease.rsquare.w700.jpg\"\n                alt=\"Avatar\"\n            />\n            {props.message}\n            <div>\n                <span>likes: {props.countLikes}</span>\n            </div>\n        </div>\n    )\n}\n\nexport default MyPost\n","import React from \"react\"\nimport s from \"./MyPosts.module.css\"\nimport MyPost from \"./Post/MyPost\"\nimport { MyPostsPropsType } from \"./MyPostsContainer\"\nimport { Field, reduxForm, reset } from \"redux-form\"\nimport { maxLengthCreator, requiredField } from \"utils/validators/validators\"\nimport { Textarea } from \"components/common/FormsControls/FormsControls\"\nimport { AppDispatch } from \"redux/redux-store\"\n\nconst MyPosts = (props: MyPostsPropsType) => {\n    console.log(\"Return YO\")\n    let addPost: (values: any, dispatch: AppDispatch) => void = (values: any, dispatch: AppDispatch) => {\n        props.addPost(values.NewPostText)\n        dispatch(reset(\"ProfileAddNewPostForm\"))\n    }\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <AddNewPostFormRedux onSubmit={addPost} />\n            <div className={s.posts}>\n                {props.posts.map((el, index) => (\n                    <MyPost message={el.message} countLikes={el.countLikes} key={index} />\n                ))}\n            </div>\n        </div>\n    )\n}\n\nconst maxLength10 = maxLengthCreator(10)\n\nfunction AddNewPostForm(props: any) {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field\n                    name=\"NewPostText\"\n                    component={Textarea}\n                    validate={[requiredField, maxLength10]}\n                    placeholder=\"your post message\"\n                />\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddNewPostFormRedux = reduxForm({ form: \"ProfileAddNewPostForm\" })(AddNewPostForm)\n\nexport default MyPosts\n","import React from \"react\"\nimport { addPostActionCreator, MyPostDataItemType } from \"redux/profile-reducer\"\nimport MyPosts from \"./MyPosts\"\nimport { connect } from \"react-redux\"\nimport { AppStateType } from \"redux/redux-store\"\n\ntype mapStatePropsType = {\n    posts: Array<MyPostDataItemType>\n}\n\ntype mapDispatchToPropsType = {\n    addPost: (newPostText: string) => void\n}\n\nexport type MyPostsPropsType = mapStatePropsType & mapDispatchToPropsType\n\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => {\n    return {\n        posts: state.profilePage.myPostData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): mapDispatchToPropsType => {\n    return {\n        addPost: (newPostText: string) => {\n            dispatch(addPostActionCreator(newPostText))\n        },\n    }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\nexport default MyPostsContainer\n","import React from \"react\"\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\"\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\"\nimport { ProfileType } from \"./ProfileContainer\"\n\nexport type ProfilePropsType = {\n    profile: ProfileType\n    status: string\n    updateStatus: (status: string) => void\n}\n\nconst Profile = (props: ProfilePropsType) => {\n    return (\n        <>\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\n            <MyPostsContainer />\n        </>\n    )\n}\n\nexport default Profile\n","import React from \"react\"\nimport Profile from \"./Profile\"\nimport { connect } from \"react-redux\"\nimport { getStatus, getUserProfile, InitialStateType, updateStatus } from \"redux/profile-reducer\"\nimport { AppStateType } from \"redux/redux-store\"\nimport { RouteComponentProps, withRouter } from \"react-router-dom\"\nimport { compose } from \"redux\"\n\nexport type ProfileType = {\n    aboutMe: string\n    contacts: {\n        facebook: string\n        website: string\n        vk: string\n        twitter: string\n        instagram: string\n        youtube: string\n        github: string\n        mainLink: string\n    }\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    fullName: string\n    userId: number\n    photos: {\n        small: string\n        large: string\n    }\n}\n\ntype PathParamsType = {\n    userId: string\n}\ntype mapStatePropsType = {\n    profile: ProfileType\n    status: string\n    authorisedUserId: number | null\n    isAuth: boolean\n}\n\ntype mapDispatchPropsType = {\n    getUserProfile: (userId: string) => void\n    getStatus: (userId: string) => void\n    updateStatus: (status: string) => void\n}\n\ntype MyPostsPropsType = mapStatePropsType & mapDispatchPropsType & RouteComponentProps<PathParamsType>\n\nclass ProfileContainer extends React.Component<MyPostsPropsType, InitialStateType> {\n    componentDidMount() {\n        let userId = this.props.match.params.userId\n        if (!userId && this.props.authorisedUserId) {\n            userId = this.props.authorisedUserId.toString()\n        }\n        if (!userId) this.props.history.push(\"/login\")\n\n        this.props.getUserProfile(userId)\n\n        // setTimeout(() => {\n        this.props.getStatus(userId)\n        // }, 1000)\n    }\n\n    render() {\n        return (\n            <Profile\n                {...this.props}\n                profile={this.props.profile}\n                status={this.props.status}\n                updateStatus={this.props.updateStatus}\n            />\n        )\n    }\n}\n\nlet mapStateToProps = (state: AppStateType): mapStatePropsType => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        authorisedUserId: state.auth.id,\n        isAuth: state.auth.isAuth,\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus }),\n    withRouter,\n    // WithAuthRedirect\n)(ProfileContainer)\n"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","profile","className","s","src","photos","small","alt","fullName","Preloader","message","countLikes","maxLength10","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","validate","requiredField","placeholder","console","log","values","dispatch","addPost","NewPostText","reset","posts","map","el","index","connect","state","profilePage","myPostData","newPostText","addPostActionCreator","MyPosts","ProfileContainer","userId","this","match","params","authorisedUserId","toString","history","push","getUserProfile","getStatus","React","compose","auth","id","isAuth","withRouter"],"sourceRoot":""}